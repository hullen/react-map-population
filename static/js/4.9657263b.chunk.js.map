{"version":3,"sources":["providers/api.js","providers/properties.js","pages/Admin/pages/Register/index.jsx","pages/Admin/pages/List/index.jsx","pages/Admin/index.jsx"],"names":["api","axios","create","baseURL","fetchAllProperties","get","createProperty","data","post","Marker","Map","Main","Layout","Register","history","useHistory","useState","loading","setLoading","map","setMap","useForm","mode","nativeValidation","errors","register","handleSubmit","setValue","watch","latitude","longitude","geolocalizacao","useMemo","lng","lat","onSubmit","useCallback","then","push","catch","e","console","log","handleSetCoords","lngLat","handleClickMap","style","width","marginRight","htmlFor","id","name","type","className","zipcode","ref","required","number","placeholder","title","pattern","readOnly","residents","htmlType","isLoading","height","onClick","setMapRef","center","draggable","onDragEnd","List","setData","useEffect","resp","result","finally","length","scope","key","Admin","useRouteMatch","path","url","adminMenu","to","items","exact"],"mappings":"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","file":"static/js/4.9657263b.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://hullen.free.beeceptor.com/map-population',\n});\n\nexport default api;\n","import api from './api';\n\nexport function fetchAllProperties() {\n  return api.get(`/properties`);\n}\n\nexport function createProperty(data) {\n  return api.post(`/properties`, data);\n}\n","import React, { useState, useCallback, useMemo } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Map, Form, Layout } from 'components';\nimport { createProperty } from 'providers/properties';\n\nconst { Marker } = Map;\nconst { Main } = Layout;\n\nexport default function Register() {\n  const history = useHistory();\n  const [loading, setLoading] = useState();\n  const [map, setMap] = useState();\n\n  const { errors, register, handleSubmit, setValue, watch } = useForm({\n    mode: 'onChange',\n    nativeValidation: true,\n  });\n\n  const { latitude, longitude } = watch();\n\n  const geolocalizacao = useMemo(\n    () => longitude && latitude && { lng: longitude, lat: latitude },\n    [latitude, longitude]\n  );\n\n  const onSubmit = useCallback(\n    data => {\n      setLoading(true);\n      createProperty(data)\n        .then(() => {\n          history.push(`/admin`);\n        })\n        .catch(e => {\n          setLoading(false);\n          console.log('e', e);\n        });\n    },\n    [history]\n  );\n\n  const handleSetCoords = useCallback(\n    lngLat => {\n      setValue('latitude', lngLat.lat);\n      setValue('longitude', lngLat.lng);\n    },\n    [setValue]\n  );\n\n  const handleClickMap = useCallback(\n    e => {\n      const { lngLat } = e;\n      handleSetCoords(lngLat);\n    },\n    [handleSetCoords]\n  );\n\n  return (\n    <>\n      <Main>\n        <div style={{ width: '30%', marginRight: '5%' }}>\n          <Form onSubmit={handleSubmit(onSubmit)}>\n            <h1>Register new</h1>\n            <label htmlFor=\"zipcode\">\n              Zip Code\n              <br />\n              <input\n                id=\"zipcode\"\n                name=\"zipcode\"\n                type=\"text\"\n                className={errors.zipcode && 'error'}\n                ref={register({ required: true })}\n              />\n              {errors.zipcode && (\n                <span className=\"error\">This is required</span>\n              )}\n            </label>\n\n            <label htmlFor=\"number\">\n              Number\n              <br />\n              <input\n                id=\"number\"\n                name=\"number\"\n                type=\"text\"\n                className={errors.number && 'error'}\n                ref={register({ required: true })}\n              />\n              {errors.number && <span className=\"error\">This is required</span>}\n            </label>\n\n            <label htmlFor=\"latitude\">\n              Latitude\n              <br />\n              <input\n                id=\"latitude\"\n                name=\"latitude\"\n                placeholder=\"Click on the map\"\n                title=\"Click on the map\"\n                type=\"text\"\n                pattern=\"[0-9]*\"\n                className={errors.latitude && 'error'}\n                ref={register({ required: true })}\n                readOnly\n              />\n              {errors.latitude && (\n                <span className=\"error\">\n                  This is required, just click on the map\n                </span>\n              )}\n            </label>\n\n            <label htmlFor=\"longitude\">\n              Longitude\n              <br />\n              <input\n                id=\"longitude\"\n                name=\"longitude\"\n                placeholder=\"Click on the map\"\n                title=\"Click on the map\"\n                type=\"text\"\n                pattern=\"[0-9]*\"\n                className={errors.longitude && 'error'}\n                ref={register({ required: true })}\n                readOnly\n              />\n              {errors.longitude && (\n                <span className=\"error\">\n                  This is required, just click on the map\n                </span>\n              )}\n            </label>\n\n            <label htmlFor=\"residents\">\n              Residents\n              <br />\n              <input\n                id=\"residents\"\n                name=\"residents\"\n                type=\"number\"\n                pattern=\"[0-9]*\"\n                className={errors.residents && 'error'}\n                ref={register({ required: true })}\n              />\n              {errors.residents && (\n                <span className=\"error\">This is required</span>\n              )}\n            </label>\n\n            <Button type=\"primary\" htmlType=\"submit\" isLoading={loading}>\n              Register\n            </Button>\n          </Form>\n        </div>\n        <div style={{ width: '50%', height: '100%' }}>\n          <Map onClick={handleClickMap} setMapRef={setMap} />\n          {geolocalizacao && (\n            <Marker\n              center={geolocalizacao}\n              map={map}\n              draggable\n              onDragEnd={handleSetCoords}\n            />\n          )}\n        </div>\n      </Main>\n    </>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Main } from 'components/Layout';\nimport { fetchAllProperties } from 'providers/properties';\nimport { Table } from 'components';\n\nexport default function List() {\n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetchAllProperties()\n      .then(resp => {\n        const result = resp.data || [];\n        setData(result);\n      })\n      // catch errors\n      .catch(() => {})\n      .finally(() => setLoading(false));\n  }, []);\n\n  if (loading) return null;\n\n  return (\n    <Main>\n      <div style={{ width: '60%' }}>\n        <p>\n          <strong>Total:</strong> {data.length}\n        </p>\n        <Table type=\"striped\">\n          <thead>\n            <tr>\n              <th scope=\"col\">Zipcode</th>\n              <th scope=\"col\">Number</th>\n              <th scope=\"col\">Residents</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.map(({ id, zipcode, number, residents }) => (\n              <tr key={id}>\n                <td>{zipcode}</td>\n                <td>{number}</td>\n                <td>{residents}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    </Main>\n  );\n}\n","import React, { useMemo } from 'react';\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\nimport { Container, Sider, Nav } from 'components/Layout';\nimport { Register, List } from './pages';\n\nexport default function Admin() {\n  const { path, url } = useRouteMatch();\n\n  const adminMenu = useMemo(\n    () => [\n      { to: url, name: 'List' },\n      { to: `${url}/register`, name: 'Register' },\n    ],\n    [url]\n  );\n\n  return (\n    <Container>\n      <Sider>\n        <Nav items={adminMenu} />\n      </Sider>\n      <Switch>\n        <Route exact path={path}>\n          <List />\n        </Route>\n        <Route path={`${path}/register`}>\n          <Register />\n        </Route>\n      </Switch>\n    </Container>\n  );\n}\n"],"sourceRoot":""}