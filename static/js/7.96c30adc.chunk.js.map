{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isArray.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/unique.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepMerge.ts","../../src/utils/isSameError.ts","../../src/logic/shouldRenderBasedOnError.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isBoolean.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/isPrimitive.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/deepEqual.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","newValue","objValue","isObject","isNaN","data","entries","reduce","previous","val","filter","Boolean","obj","defaultValue","unique","split","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","unmountFieldsStateRef","current","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","mutationWatcher","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","disconnect","search","output","isString","startsWith","find","deepMerge","target","source","targetValue","sourceValue","types","message","every","shouldRenderBasedOnError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","RegExp","validationData","isRegex","getValidateError","isBoolean","validateAllFieldCriteria","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","validateResult","getPath","pathWithIndex","isPrimitive","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","deepEqual","object1","object2","keys1","keys2","val1","val2","isMatchFieldArrayName","searchName","names","some","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","mode","isOnSubmit","isWindowUndefined","isWeb","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","defaultValues","shouldFocusError","criteriaMode","React.useRef","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","dirtyFieldsRef","watchFieldsRef","Set","watchFieldsHookRef","watchFieldsHookRenderRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","React.useState","render","modeRef","modeChecker","isValidateAllFieldCriteria","readFormStateRef","isDirty","dirtyFields","submitCount","touched","isSubmitting","reRender","React.useCallback","shouldRenderBaseOnError","shouldRender","shouldReRender","previousError","delete","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","String","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","getValues","getFieldArrayParentName","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","trigger","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","isFieldWatched","renderWatchedInputs","found","size","setValue","getFieldsValues","shouldSkipValidation","skipValidation","validateResolver","removeFieldEventListener","removeFieldEventListenerAndRef","clearErrors","inputName","setError","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isEmptyDefaultValue","isEmptyUnmountFields","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","callback","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","formState","commonProps","prop","control","validateSchemaIsValid","FormContext","React.createContext","displayName"],"mappings":"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","file":"static/js/7.96c30adc.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (unmountFieldsStateRef) {\n    return unmountFieldsStateRef.current[name];\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  unmountFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject((unmountFieldsStateRef || {}).current || {}),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (!isObject(target) || !isObject(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    if (isObject(targetValue) && isObject(sourceValue)) {\n      target[key] = deepMerge(targetValue, sourceValue);\n    } else {\n      target[key] = sourceValue;\n    }\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? ((fields[name] as Field).options || [])[0].ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, unmountFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldValues, InternalFieldName } from '../types/form';\n\nexport const getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(value, key, isObject(values)))\n    .flat(Infinity);\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath<TFieldValues>(\n        fieldName,\n        value as TFieldValues,\n      ).forEach((name: string) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { Ref } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: () => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './logic/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnAll },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(\n    () => !isUnMount.current && render({}),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = String(\n                  value as string | boolean,\n                ).includes(checkboxRef.value)),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          !deepEqual(\n            get(getValues(), getFieldArrayParentName(name)),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          unmountFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            if (error) {\n              set(errorsRef.current, name, error);\n            } else {\n              unset(errorsRef.current, name);\n            }\n\n            return !error;\n          })\n          .every(Boolean);\n\n        reRender();\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n\n      if (!shouldUnregister) {\n        unmountFieldsStateRef.current[name] = value;\n      }\n\n      return true;\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          name === '' ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation =\n            !isOnAll &&\n            skipValidation({\n              isBlurEvent,\n              isReValidateOnChange,\n              isReValidateOnBlur,\n              isSubmitted: isSubmittedRef.current,\n              ...modeRef.current,\n            });\n          let shouldRender = setDirty(name) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(touchedFieldsRef.current, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(touchedFieldsRef.current, name, true);\n            shouldRender = true;\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return shouldRender && reRender();\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = isValidRef.current;\n            isValidRef.current = isEmptyObject(errors);\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as FlatFieldErrors<TFieldValues>;\n\n            if (previousFormIsValid !== isValidRef.current) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              unmountFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n\n          if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n            reRender();\n          }\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, unmountFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getFieldValue(fieldsRef, name, unmountFieldsStateRef),\n        }),\n        {},\n      );\n    }\n\n    return getFieldsValues(fieldsRef, unmountFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n\n          [fieldsWithValidationRef, validFieldsRef].forEach((data) =>\n            data.current.delete(field.ref.name),\n          );\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched ||\n            readFormStateRef.current.isDirty\n          ) {\n            isDirtyRef.current = !isEmptyObject(dirtyFieldsRef.current);\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        unmountFieldsStateRef,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute:', ref);\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+]\\.\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\". https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(unmountFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : unmountFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          unmountFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = isValidRef.current;\n\n          isEmptyObject(error)\n            ? validFieldsRef.current.add(name)\n            : (isValidRef.current = false);\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, unmountFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        unmountFieldsStateRef,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                unmountFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                unset(errorsRef.current, name);\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    unmountFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}